flux
                                    * * *
# flux
## Jellemzok:


	* single directional data flow (unidirectional)
	* data consistency easier find a bug, has a direction of flow
	* views query Stores (not Models), and user interactions result in Actions that are submitted to a centralized single Dispatcher.
	* The main difference between MVC and Flux is the separation of queries and updates
	*  In Flux, the data that a View gets from a Store is read-only. Stores can only be updated through Actions, which would affect the Stores themselves not the read-only data.


 .                   ,,,,,,,,,,,,,,,,,,,,,,,.,
 .                   ,,,,,,,,,,,,,,,,,,,,,,,,, ................     .       .
 ................../ ,,,,,,,, ACTIONS ,,,,,,,,, /........      .
 .                   ,,,,,,,,,,,,,,,,,,,,,,,,,        .       .     /
 .                   ,,,,,,,,,,,,,,,,,,,,,,,,,        .       .
 .                               .                    .       .   /
 .                               .                    .       .     /
 .                               /                    .       .     /
 .                   /////////////////////////        .       .     /
 .                   /////////////////////////        .       .     /
 .                   ////DISPATCHER      /////        .       .     /
 .                   /////////////////////////        .       .     /
 .                   ************(***********,        .       .     /
 .                               .                    .       .     /
 .                               .                    .       .     /
 .                               /*                   .       .    /
 .                   *************************        .       .     /
 .                   *********,***************        .       .     /
 .                   ********STORES  *,*********        .       .
 .                   *************************        .       .     /
 .                               .                    .       .     /
 .                               .                    .       .     /
 .                               .                    .       .     #*
 .                               /                    .       /.     .
 .                   (((((((((((((((((((((((((      */.///////./////////////////
 .                   (((((((((/.,(((((((((((((      */.///////.//././,//////////
 .                   ((((((( VIEWS     ((((((((      */./////API    //////////
 ................... (((((((((((((((((((((((((      */.///////./////////////////

Stores:

	* hold data
   • multiples stores
	* signal when something changed
	* emits a change and the views rerendered
   • it is an event emitter
	* Containers for application state & logic that have callbacks registered to the dispatcher
   • every store register to dispacher


Views:

	* subscribe to the store
	* readonly store data!!
	* React Components that grab the state from Stores and pass it down via props to child components
   • action creator function


Actions

	* things that happen
   • action az egy literal payload
	* Helper (action creators) methods that facilitate passing data to the Dispatcher
	* view triggered actions and server/API triggered actions


Dispacher

	* every action passes thouth the dipacther
   • singleton
	* handle actions one by one (queue)
	* to the registered store
	* make sure every Action invokes onDispatch on every Strore
	* Receives actions and broadcasts payloads to registered callbacks
   • notified the stores, if it interested update their notify the views


API:

	* data that is coming from (or going to) the outside



