git

# Terms
HEAD - always points to the most recent commits, Normally HEAD points to a branch name, current checkout
Detaching HEAD - attached it to a commit
HEAD^ - head - 1 commit Å±
move a branch to that location :  git branch -f master HEAD~3

git branch -f master <commit>
                                    * * *

#SETTINGS (.gitconfig)
##User, home
%USERPROFILE% used by default on Windows

git config --global user.name "csabagaspar"
git config --global user.email "gaspar.csaba@gmail.com"

##Ssh keys
ssh-keygen -t rsa -C "gaspar.csaba@gmail.com"
clip < ~/.ssh/id_rsa.pub

ssh -vT git@github.com
ssh-add -l
##Editor
$EDITOR

git config --global core.editor vim
git config --global merge.tool kdiff3

Proxy
git config --global http.proxy http://proxyuser:proxypwd@proxy.server.com:8080
git config --global https.proxy https://proxyuser:proxypwd@proxy.server.com:8080
Other
git config --global color.ui true
git config --global push.default upstream

git config --global core.autocrlf true

git config --global merge.tool kdiff3
git config --global mergetool.kdiff3.cmd '"C:\\Program Files\\KDiff3\\kdiff3" $BASE $LOCAL $REMOTE -o $MERGED'

git mergetool




REPOSITORIES

Create local repo:
git init < repo>
Clone existing repo:
git clone <URL> [<repo>]


Commits
Add file(s) to index:
git add <file >...
Remove file(s) from index:
git reset <file>...
Commit indexed files:
git commit [-m <message>]
Automatically stage tracked files:
git add -u


Undoing
Return to last commited state. (removes uncommitted changes and files)
git reset --hard
Revert the last commit
git revert HEAD
Revert multiple commits
git revert <commit>...


Branches
List branches
git branch [-a]
Create branch
git branch <branch>
Checkout branch
git checkout <branch>
Create and checkout a branch
git checkout -b <branch>
Delete branch
git branch -d <branch>


Remote branches
Show branch tracking
git remote show <remote>
Create remote branch from local
git push -u <remote> <branch>
Create and checkout local branch from remote
git checkout <remote-branch>

Delete remote branch
git push <remote> :<branch>
Fetch changes from remote  (does not merge)
git fetch
Fetch and merge remote branch with local (a fetch and merge after)
git pull
Fetch and merge all remote branches with their local counterpart
git pull --all
Push new commits to remote branch
git push
Update remote branches
git remote prune origin


Setting up a remote repository and doing an initial push
setup the remote repository
ssh git@example.com
mkdir my_project.git
cd my_project.git
git init --bare
git update-server-info # If planning to serve via HTTP
exit
On local machine
cd my_project
git init
git add *
git commit -m "My initial commit message"
git remote add origin git@example.com:my_project.git
git push -u origin master



Merging

Merge other branch into current
git merge <branch>
Merge without fast-forward (reintegrate)
git merge --no-ff <branch>


Checking history

Get commit history of the current branch
git log
Get history between two dates
git log --after=2012-04-11 --before=yesterday
Get history with commit author matching regexp
git log --author=<regexp>
Get history with commit messages matching regexp
git log --grep=<regexp>
Get history in a compact format
git log --pretty=oneline
Show log with diff for last two commit
git log -p -2

git log --since=2weeks

git log --stat

git show

git show  --name-only <hash>

git diff --name-only SHA1 SHA2

git diff --name-only HEAD~10 HEAD~5

git diff SHA1 SHA2 -- filepath

git log --graph --oneline --all

git log --graph --pretty=oneline --abbrev-commit

git log --since=2.months.ago --until=1.day.ago --author=andy -S "something" --all-match






Review
get files
git diff --name-only SHA1 SHA2
get
git diff SHA1 SHA2 -- filepath


Viewing and diffing

Check status
git status
Inspect object
git show <object>
Diff current state against index
git diff [<path>]
Diff index against last commit
git diff --cached [<path>]
Diff current state against commit
git diff <commit>
Diff two commits against eachother
git diff <commit-a> <commit-b>



NEVER
-------
rebase
--amend
--squash
--force

ALWAYS
-------
--no-ff when merging to master or release pull target branch before merging


WORKFLOW WITH GERRIT (MERGE)

Setting up Gerrit
-------------------------
scp -p -P 29418 <signum>@host:hooks/commit-msg commit-msg
1.cd  ./git/hooks/commit-msg                Install commit hook
2.git config remote.origin.push HEAD:refs/for/master                                        Push setup
3.git push origin <featurebranchname>:refs/for/master                                                        Push to Gerrit a feature branch

Reviewing with Gerrit:
-------------------------

1. git checkout master (up to date)
2. git push origin HEAD:refs/for/master
3. modifying according to review comments
4. git add <fileok>
5. git commit --amend (modositsuk a legutobbi commitot es tegyuk bele az uj dolgokat)


Reviewing with Gerrit::
-------------------------
1.git checkout master
2.git push origin HEAD:refs/for/master
                                                                            Review push (git push origin <local branch>:refs/for/<remote branch>)
3a. commit -m"<message> <enter> <CHANGEID>"  Implement review comment
3b. commit --amend -m "message"                           Implement review comment
4.git push origin HEAD:refs/for/master                   Push for review





Creating a feature branch
-------------------------
1. git checkout master           Switch to master
2. git pull                              Pull any changes
3. git branch <featurebranchname>   Create the feature branch
4. git checkout <featurebranchname>      Checkout the feature branch
5. git push -u origin <featurebranchname> Create the feature branch on origin

Keeping a feature branch up to date
-------------------------
1. git checkout master            Switch to master
2. git pull                              Pull any changes
3. git checkout <featurebranchname> Switch to the feature branch
4. git merge master               Merge master into feature (no message)

Merging a feature branch back to master with history
-------------------------
1. git checkout master             Switch to master
2. git pull                               Pull any changes
3. git merge --no-ff <featurebranchname> Merge feature back into master (no message, create a new commit object)
4. git push                              Push the changes to master (no review)

Merging a feature branch back to master without history
-------------------------
1. git checkout master                  Switch to master
2. git pull                                    Pull any changes
3. git merge --squash <featurebranchname>  Merge feature back into master without commit
4. git commit -m "merge feature" Commit files
5. git push                                  Push the changes to master (no review)

Cleaning up a feature branch
-------------------------
1. git branch -d <feature>      Delete the branch locally
2. git push origin :<feature>   Delete the branch on origin


WORKFLOW WITH GERRIT  (REBASE)

Creating a feature branch
-------------------------
1.git checkout master
2.git fetch
3.git checkout -b <myfeature> origin/master
4.git push origin <uj_remote_branch_neve>

Keeping a feature branch up to date
-------------------------
1. git fetch
2. git co <feature_branch>
3. git rebase origin/master


Rebasing a feature branch onto master without history
-------------------------
1. git fetch
2. git co <feature_branch>
3. git rebase -i origin/master (interactive mode, itt squasholhatunk meg akarmit csinalhatunk a commitokkal)


Pushing local changes to remote branch
-------------------------
1. git fetch
2. git checkout -b <feature_branch> origin/master
3. git push origin <feature_branch>


Pushing  for Gerrit review
-------------------------
1. git co <feature_branch>
2. git push origin <feature_branch>:refs/for/master


Cleaning up a feature branch
-------------------------
1. git branch -d <feature>  [delete the branch locally]
2. git push origin :<feature> [delete the branch on the origin remote]


git rebase origin/master
git checkout master
git merge --squash <feature_branch>
git commit -m"feature description"
git push

-----------------------------
git reset --hard origin/master
git checkout -b fix_branch origin/master
git cherry-pick <hash>


Update the lastest commit + new changes
-----------------------------
git commit -amend
git push origin HEAD:refs/for/master



The copy of the patch that failed is found in:
   c:/Users/egspcsa/workspace/carcare/carcare-appsrv/.git/rebase-apply/patch

When you have resolved this problem, run "git rebase --continue".
If you prefer to skip this patch, run "git rebase --skip" instead.
To check out the original branch and stop rebasing, run "git rebase --abort".



Interactive rabase:
git reset --hard origin/master
git checkout -b fix_branch origin/master
git rebase -i origin/master
 -> pick
 -> squash
     squash

RELEASE
------
Before release
1. git checkout master Switch to master
2. git pull Pull any changes
3. git checkout release Switch to release
4. git pull Pull any changes
5. cd  Merge master into release (no message)
6. git push

During release test phase
1. Test and fix bugs on release branch
2. Perform the actual release with release-component.sh

After release
1. git checkout release  Switch to release
2 git pull Pull any changes
3. git checkout master Switch to master
4. git pull Pull any changes
5. git merge --no-ff --no-commit release Merge release back into master (without committing)
6. Make sure project builds
7. git commit Commit (and accept the default message)
8. git push Push changes to origin

Tag
----
Add tag
git tag <tagname>
Push tags
git push origin --tags
Delete tag locally
git tag -d <tagname>
Delete tag on remote branch
git push origin :refs/tags/<tagname>
Rename tag git tag new_tag old_tag
git push --tags
git push origin :refs/tags/old_tag
git tag -d old_tag



git gui
gitk



git remote -v
git remote add <remote name> <remote address>
git remote add <remote name> git@github.com:matthewmccullough/ts.git

git push
git push <remote name> <branch name>
git push <remote name> <local branch name:remote branch name>

git fetch <remote name>
git merge <remote name/remote branch
git checkout --track origin/branch>



git pull
git pull <remote name>
git pull <remote name> <branch name>

git bundle create catchupsusan.bundle HEAD~8..HEAD
git bundle create catchupsusan.bundle --since=10.days master
git ls-remote catchupsusan.bundle
git fetch catchupsusan.bundle




git checkout HEAD~3



DIFF

git diff
git diff 32d4..
git diff --summary 32d4..


BLAME

git blame <filename>


git stash
git stash pop

git reset --hard

git branch -a
git branch <new branch name> <from branch>
git branch <new branch name>


git checkout -b <new branch name>

git branch -d <branch>
git push origin :<branch>
git push origin --delete <branchName>


git merge <branch one>
git merge <branch one> <branch two>

git rebase <source branch name>
git rebase <source branch name> <destination branch name>




git update-index --chmod=+x file

git update-index --assume-unchanged -- afile

find . -type f -print0 | xargs -0 dos2unix
