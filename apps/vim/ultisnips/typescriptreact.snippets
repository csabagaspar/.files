extends typescript


snippet ism "import scss module" b
import ${2:styles} from "./${1:`!v expand('%:t:r')`}.module.scss";
endsnippet


# ==========================================
# React class components
#
snippet rcc "React class component" b
class $1 extends Component {
	public render() {
		return null;$0
	}
}
endsnippet

snippet rcon "React class constructor" b
constructor(props: ${1:`!v expand('%:t:r')`}Props) {
	super(props);

	this.state = ${1:{}};$0
}
endsnippet

snippet rcep "react class exported (with prop interface)" b
import React, { Component } from "react";

export interface $1Props {
}

export default class ${1:`!v expand('%:t:r')`} extends Component<$1Props> {
	public render() {
		return ${2:null};$0
	}
}
endsnippet


snippet rceps "react class exported (with prop and state interfaces)" b
import React, { Component } from "react";

export interface $1Props {
}

export interface $1State {
}

export default class ${1:`!v expand('%:t:r')`} extends Component<$1Props, $1State> {
	constructor(props: $1Props) {
		super(props);

		this.state = {};
	}

	public render() {
		return ${2:null};$0
	}
}
endsnippet

snippet rcf "react class function" b
$1 = (${2:event}) => {
	$3
};
endsnippet

# ==========================================
# React functional components
#


snippet fce "function component export (with prop interface)" b
import React, { FC } from "react";

export interface $1Props {
	$3
}

const ${1:`!v expand('%:t:r')`}: FC<$2$1Props> = props => {
	return ${4:null};$0
};

export default $1;
endsnippet

snippet fc "function component export" b
import React from "react";

export interface $1Props {
	$3
}

export const ${1:`!v expand('%:t:r')`} = (props: $2$1Props): JSX.Element => {
	return ${4:null};$0
};
endsnippet

snippet sfce "simple function component export (no prop interface)" b
import React, { FC } from "react";

const ${1:`!v expand('%:t:r')`}: FC = () => ${2:{
	return ${3:null};$0
}};

export default $1;
endsnippet

snippet ffce "forwarded function component export"
import React, { forwardRef, ReactNode } from "react";

interface ${1:`!v expand('%:t:r')`}Props {
	children?: ReactNode;
}

export default forwardRef<HTML${2:Div}Element, $1Props>(function $1(props, ref) {
	return (
		<div ref={ref}>$0
		</div>
	);
});
endsnippet


# ==========================================
# Component Specs and Lifecycle Section
#
snippet sdp "static default props" b
public static defaultProps = {
	$2
};
endsnippet

snippet sdpt "static default props (typed)" b
public static defaultProps: DefaultProps = {
	$2
};
endsnippet

snippet cdp "component default props" b
${1:`!v expand('%:t:r')`}.defaultProps = {
	$2
};
endsnippet

snippet cdpt "component default props (typed)" b
const defaultProps: $1DefaultProps = {
	$2
};

${3:`!v expand('%:t:r')`}.defaultProps = defaultProps;
endsnippet

snippet spt "static prop types" b
public static propTypes = {
	${1:className}: ${2:PropTypes.string},$0
};
endsnippet

snippet cpt "component prop types" b
${1:`!v expand('%:t:r')`}.propTypes = {
	${2:className}: ${3:PropTypes.string},$0
};
endsnippet

snippet gds "get derived state from props" b
public static getDerivedStateFromProps(nextProps: ${1:`!v expand('%:t:r')`}Props, prevState: $1State) {
	return ${2:null};$0
};
endsnippet

snippet gde "get derived state from props" b
public static getDerivedStateFromError(error: Error) {
	return ${1:null};$0
};
endsnippet

snippet cdm "component did mount" b
public componentDidMount() {
	$1
}
endsnippet

snippet scu "should component update" b
public shouldComponentUpdate(nextProps: ${1:`!v expand('%:t:r')`}Props, nextState: $1State) {
	return ${1:true};$0
}
endsnippet

snippet gsbu "get snapshot before update" b
public getSnapshotBeforeUpdate(prevProps: ${1:`!v expand('%:t:r')`}Props, prevState: $1State) {
	return ${2:null};$0
}
endsnippet

snippet cdu "component did update" b
public componentDidUpdate(prevProps: ${1:`!v expand('%:t:r')`}Props, prevState: $1State, ${2:snapshot: any}) {
	$3
}
endsnippet

snippet cdc "component did catch" b
public componentDidCatch(error: Error, info: ErrorInfo) {
	$1
}
endsnippet

snippet cwum "component will unmount" b
public componentWillUnmount() {
	$1
}
endsnippet

snippet r.me "React.MouseEvent" w
React.MouseEvent$0
endsnippet

snippet r.te "React.TouchEvent" w
React.TouchEvent$0
endsnippet

snippet r.ke "React.KeyboardEvent" w
React.KeyboardEvent$0
endsnippet

snippet r.ce "React.ChangeEvent" w
React.ChangeEvent$0
endsnippet

snippet r.fo "React.FocusEvent" w
React.FocusEvent$0
endsnippet

snippet r.meh "React.MouseEventHandler" w
React.MouseEventHandler$0
endsnippet

snippet r.teh "React.TouchEventHandler" w
React.TouchEventHandler$0
endsnippet

snippet r.keh "React.KeyboardEventHandler" w
React.KeyboardEventHandler$0
endsnippet

snippet r.ceh "React.ChangeEventHandler" w
React.ChangeEventHandler$0
endsnippet

snippet r.foh "React.FocusEventHandler" w
React.FocusEventHandler$0
endsnippet


# ==========================================
# Hooks and effects
#

snippet useS "useState()" b
const [$1, set$4`!p snip.rv=upperfirst(t[1])`] = useState$3($2);$0
endsnippet

snippet useE "useEffect()" b
useEffect(() => {
	$1$0
}$2);
endsnippet

snippet useC "useContext()" b
${5:const ${1:context} =} useContext$3($2);$0
endsnippet

snippet useRed "useReducer(reducer, initialValue)" b
const [${4:state}, ${5:dispatch}] = useReducer<typeof $2>(${2:reducer}, ${3:null});
endsnippet

snippet useRedUT "use reducer untyped" b
const [${3:state}, ${4:dispatch}] = useReducer($1, ${2:{}});
endsnippet

snippet useCB "useCallback(fn, inputs)" b
const ${1:callback} = useCallback(($2) => ${3:{
	$4
}}, [$5]);
endsnippet

snippet useM "useMemo(fn, inputs)" b
const ${1:memoized} = useMemo(() => ${2:{
	$3
}}, [$4]);
endsnippet

snippet useR "useRef(defaultValue)" b
const ${1:ref} = useRef$3(${2:null});$0
endsnippet

snippet useI "useImperitiveHandle(ref, createHandle, [inputs])" b
useImperitiveHandle(${1:ref}, ${4:() => ({
	$2
})}, ${5:[$3]})
endsnippet

snippet useL "useLayoutEffect()" b
useLayoutEffect(() => {
	$1
});
endsnippet

snippet useD "useDebugValue(value)" b
useDebugValue(${1:null});
endsnippet

# ==========================================
# "Inline" versions of hooks
#

priority -1
snippet useC "useContext()" w
useContext$2($1);
endsnippet

snippet useCB "useCallback(fn, inputs)" w
useCallback(($1) => ${2:{
	$3
}}, [$4]);
endsnippet

snippet useM "useMemo(fn, inputs)" w
useMemo(() => ${1:{
	$2
}}, [$3]);
endsnippet

snippet useR "useRef(defaultValue)" w
useRef$2(${1:null});$0
endsnippet

