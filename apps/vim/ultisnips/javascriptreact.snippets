extends javascript

snippet ir
import React from 'react'
endsnippet

snippet ip
import PropTypes from 'prop-types'
endsnippet

snippet irc
import React, { Component } from 'react'
endsnippet

#Lifecycle
#mount
#1
snippet ctor
constructor(props) {
  super(props)
    ${1}
}
endsnippet

#2
snippet gdsfp
static getDerivedStateFromProps(props, state){
  ${1}
}
endsnippet

#3
snippet ren
render() {
  return (
      ${1:<div></div>}
  )
}
endsnippet

#4
snippet cdm
componentDidMount() {
  ${1}
}
endsnippet

#update
#2
snippet scu
shouldComponentUpdate(nextProps, nextState) {
  ${1}
}
endsnippet

#4
snippet gsbu
getSnapshotBeforeUpdate(prevProps, prevState) {
  ${1}
}
endsnippet

#5
snippet cdu
componentDidUpdate(prevProps, prevState, snapshot) {
  ${1}
}
endsnippet

#unmount
snippet cwu
componentWillUnmount() {
  ${1}
}
endsnippet

#errorhandling
snippet cdc
componentDidCatch(){
  ${1}
}
endsnippet


#react members
snippet rcc
import React, { Component } from 'react'
class ${1:ClassName} extends Component {
  render() {
    return (
        ${0:<div></div>}
        )
  }
}

export default $1
endsnippet

snippet rfc "React Functional Component" b
import React from 'react'

export default function ${1:`!v expand('%:t:r')`}(${2:props}) {
  return (
    <>
     $3
    </>
  )
}
endsnippet

snippet rac "React Arrow Component"
import React, { Fragment } from 'react'
import PropTypes from 'prop-types'

const ${1:`!v expand('%:t:r')`} = ${2:props}  => (
  <Fragment>
    $3
  </Fragment>
)

$1.defaultProps = {}

$1.propTypes = {}

export default $1
endsnippet

snippet st
state = {
  ${1}: ${2},
}
endsnippet


snippet sst
this.setState((prevState, props) = > ({
  ${1}: ${2}
})
endsnippet
#Default props

snippet sdp
static defaultProps = {
  ${1}: ${2},
}
endsnippet

snippet dp "Default Props" b
    ${1:`!v expand('%:t:r')`.}defaultProps = {
    $2
    }
endsnippet

#PropTypes
snippet spt
static propTypes = {
  ${1}: PropTypes.${2:type},
}
endsnippet

snippet pt "PropTypes Definition" b
${1:`!v expand('%:t:r')`.}propTypes = {
  ${2:className}: ${3:PropTypes.string},
};
endsnippet

snippet  pt.a "PropTypes Array" w
PropTypes.array${1:,}
endsnippet

snippet   pt.b "PropTypes Boolean" w
PropTypes.bool${1:,}
endsnippet

snippet pt.f "PropTypes Function" w
PropTypes.func${1:,}
endsnippet

snippet pt.n "PropTypes Number" w
PropTypes.number${1:,}
endsnippet

snippet pt.o "PropTypes Object" w
PropTypes.object${1:,}
endsnippet

snippet pt.s "PropType String" w
PropTypes.string${1:,}
endsnippet

snippet pt.no "PropTypes Node" w
PropTypes.node${1:,}
endsnippet

snippet pt.e "PropTypes Element" w
PropTypes.element${1:,}
endsnippet

snippet pt.io "PropTypes instanceOf" w
PropTypes.instanceOf(${2:PropTypes.string})${1:,}
endsnippet

snippet pt.one "PropTypes oneOf" w
PropTypes.oneOf(['$2'$3])${1:,}
endsnippet

snippet pt.onet "PropTypes oneOfType" w
PropTypes.oneOfType([
  $2
])${1:,}
endsnippet

snippet pt.ao "PropTypes arrayOf" w
PropTypes.arrayOf(${2:PropTypes.string})${1:,}
endsnippet

snippet pt.oo "PropTypes objectOf" w
PropTypes.objectOf(${2:PropTypes.string})${1:,}
endsnippet

snippet pt.sh "PropTyes Shape" w
PropTypes.shape({
  $2
})${1:,}
endsnippet

snippet r "isRequired" w
isRequired,
endsnippet



# ==========================================
# Prop Types Section (only for legacy)
#

# Inline prop types
snippet pt.a "PropTypes.array" w
PropTypes.array
endsnippet

snippet pt.ar "PropTypes.array.isRequired" w
PropTypes.array.isRequired
endsnippet

snippet pt.b "PropTypes.bool" w
PropTypes.bool
endsnippet

snippet pt.br "PropTypes.bool.isRequired" w
PropTypes.bool.isRequired
endsnippet

snippet pt.f "PropTypes.func" w
PropTypes.func
endsnippet

snippet pt.fr "PropTypes.func.isRequired" w
PropTypes.func.isRequired
endsnippet

snippet pt.nu "PropTypes.number" w
PropTypes.number
endsnippet

snippet pt.nur "PropTypes.number.isRequired" w
PropTypes.number.isRequired
endsnippet

snippet pt.o "PropTypes.object" w
PropTypes.object
endsnippet

snippet pt.or "PropTypes.object.isRequired" w
PropTypes.object.isRequired
endsnippet

snippet pt.s "PropTyes.string" w
PropTypes.string
endsnippet

snippet pt.sr "PropTyes.string.isRequired" w
PropTypes.string.isRequired
endsnippet

snippet pt.no "PropTypes.node" w
PropTypes.node
endsnippet

snippet pt.nor "PropTypes.node.isRequired" w
PropTypes.node.isRequired
endsnippet

snippet pt.e "PropTypes.element" w
PropTypes.element
endsnippet

snippet pt.er "PropTypes.element.isRequired" w
PropTypes.element.isRequired
endsnippet

snippet pt.ao "PropTypes.arrayOf()" w
PropTypes.arrayOf(${1:PropTypes.string})
endsnippet

snippet pt.aor "PropTypes.arrayOf().isRequired" w
PropTypes.arrayOf(${1:PropTypes.string}).isRequired
endsnippet

snippet pt.io "PropTypes.instanceOf()" w
PropTypes.instanceOf(${1:PropTypes.string})
endsnippet

snippet pt.ior "PropTypes.instanceOf().isRequired" w
PropTypes.instanceOf(${1:PropTypes.string}).isRequired
endsnippet

snippet pt.oo "PropTypes.objectOf()" w
PropTypes.objectOf(${1:PropTypes.string})
endsnippet

snippet pt.oor "PropTypes.objectOf().isRequired" w
PropTypes.objectOf(${1:PropTypes.string}).isRequired
endsnippet

snippet pt.one "PropTypes.oneOf([])" w
PropTypes.oneOf(["$1"$2])
endsnippet

snippet pt.oner "PropTypes.oneOf([]).isRequired" w
PropTypes.oneOf(["$1"$2]).isRequired
endsnippet

snippet pt.onet "PropTYpes.oneOfType([])" w
PropTypes.oneOfType([
	$1
])
endsnippet

snippet pt.onetr "PropTYpes.oneOfType([]).isRequired" w
PropTypes.oneOfType([
	$1
]).isRequired
endsnippet

snippet pt.sh "PropTypes.shape" w
PropTypes.shape({
	$1
})
endsnippet

snippet pt.shr "PropTypes.shape.isRequired" w
PropTypes.shape({
	$1
}).isRequired
endsnippet

snippet rce "react class exported" b
import React, { Component } from "react";

export default class ${1:`!v expand('%:t:r')`} extends Component {
	public render() {
		return ${2:null};$0
	}
}
endsnippet
