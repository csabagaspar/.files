snippet ir
import React from 'react'
endsnippet

snippet ip
import PropTypes from 'prop-types'
endsnippet

snippet irc
import React, { Component } from 'react'
endsnippet

snippet ir
import { render } from 'react-dom'
endsnippet

snippet cdm
componentDidMount() {
  ${1}
}
endsnippet

snippet cdup
componentDidUpdate(prevProps, prevState) {
  ${1}
}
endsnippet

snippet scu
shouldComponentUpdate(nextProps, nextState) {
  ${1}
}
endsnippet

snippet cwun
componentWillUnmount() {
  ${1}
}
endsnippet

snippet fup
forceUpdate(${1:callback});
endsnippet


snippet st
state = {
  ${1}: ${2},
}
endsnippet


snippet rcc
class ${1:ClassName} extends React.Component {
  render() {
    return (
        ${0:<div />}
        )
  }
}
endsnippet

snippet rdr
render(${1}, ${2})
endsnippet

snippet ercc
  export default class ${1:ClassName} extends React.Component {
    render() {
      return (
          ${0:<div />}
          )
    }
  }
endsnippet

snippet ctor
constructor() {
  super()
    ${1}
}
endsnippet

snippet ren
render() {
  return (
      ${1:<div />}
  )
}
endsnippet

snippet sst
this.setState(() = > ({
  ${1}: ${2}
})
endsnippet

#Default props

snippet sdp
static defaultProps = {
  ${1}: ${2},
}
endsnippet

snippet dp "Default Props" b
    ${1:`!v expand('%:t:r')`.}defaultProps = {
    $2
    }
endsnippet

#Props
snippet spt
static propTypes = {
  ${1}: PropTypes.${2:type},
}
endsnippet

snippet pt "PropTypes Definition" b
${1:`!v expand('%:t:r')`.}propTypes = {
  ${2:className}: ${3:PropTypes.string},
};
endsnippet

snippet  pt.a "PropTypes Array" w
PropTypes.array${1:,}
endsnippet

snippet   pt.b "PropTypes Boolean" w
PropTypes.bool${1:,}
endsnippet

snippet pt.f "PropTypes Function" w
PropTypes.func${1:,}
endsnippet

snippet pt.n "PropTypes Number" w
PropTypes.number${1:,}
endsnippet

snippet pt.o "PropTypes Object" w
PropTypes.object${1:,}
endsnippet

snippet pt.s "PropType String" w
PropTypes.string${1:,}
endsnippet

snippet pt.no "PropTypes Node" w
PropTypes.node${1:,}
endsnippet

snippet pt.e "PropTypes Element" w
PropTypes.element${1:,}
endsnippet

snippet pt.io "PropTypes instanceOf" w
PropTypes.instanceOf(${2:PropTypes.string})${1:,}
endsnippet

snippet pt.one "PropTypes oneOf" w
PropTypes.oneOf(['$2'$3])${1:,}
endsnippet

snippet pt.onet "PropTypes oneOfType" w
PropTypes.oneOfType([
  $2
])${1:,}
endsnippet

snippet pt.ao "PropTypes arrayOf" w
PropTypes.arrayOf(${2:PropTypes.string})${1:,}
endsnippet

snippet pt.oo "PropTypes objectOf" w
PropTypes.objectOf(${2:PropTypes.string})${1:,}
endsnippet

snippet pt.sh "PropTyes Shape" w
PropTypes.shape({
  $2
})${1:,}
endsnippet

snippet ir "isRequired" w
isRequired,
endsnippet
