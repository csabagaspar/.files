execute pathogen#infect()

filetype plugin indent on    "file type detection
syntax enable                "basic syntax highlight

set nocompatible
set autoread                " Set to auto read when a file is changed from
set ruler                   " Always show current position
set number                  " line numbers

set ignorecase              " ignore case when searching
set hlsearch                " Highlight search results
set smartcase               " When searching try to be smart about cases
set incsearch
set showmatch               " Show matching brackets when text indicator is over them

set wildmode=list:longest,full

set autoindent              " automatic indent new lines
set showcmd
set list                    " show trailing whiteshace and tabsvi
set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+,eol:Â¬
"
" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

set shortmess=a
set laststatus=2
set noshowmode
set encoding=utf-8
set fileformat=unix

set nobackup
set nowb
set noswapfile
let mapleader = ","
let g:mapleader = ","

set foldmethod=indent
set nofoldenable
set foldlevel=0

set background=dark
colorscheme dracula 
set t_Co=256
set timeout timeoutlen=1000 ttimeoutlen=0
let g:indentLine_setConceal = 0
"easymotion
map <Leader> <Plug>(easymotion-prefix)

"pangloss/vim-javascript
let g:javascript_plugin_flow = 1
let g:javascript_conceal_function             = "Æ’"
let g:javascript_conceal_null                 = "Ã¸"
let g:javascript_conceal_this                 = "@"
let g:javascript_conceal_return               = "<"
let g:javascript_conceal_undefined            = "Â¿"
let g:javascript_conceal_NaN                  = "â„•"
let g:javascript_conceal_prototype            = "Â¶"
let g:javascript_conceal_static               = "â€¢"
let g:javascript_conceal_super                = "Î©"
let g:javascript_conceal_arrow_function       = "â‡’"
let g:javascript_conceal_noarg_arrow_function = "ðŸž…"
let g:javascript_conceal_underscore_arrow_function = "ðŸž…"
set conceallevel=1

"ctrlpvim/ctrlp.vim
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/node_modules/*,*/coverage/*     " Linux/MacOSX
let g:ctrlp_working_path_mode = 'ra'

"scrooloose/nerdtree
let NERDTreeDirArrows = 1
let NERDTreeShowHidden=1
let g:NERDTreeDirArrowExpandable="+"
let g:NERDTreeDirArrowCollapsible="~"

map <C-n> :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

"wikitopian/hardmode
""autocmd VimEnter,BufNewFile,BufReadPost * silent! call HardMode()

"editorconfig
let g:EditorConfig_max_line_indicator = "line"

"jsx
let g:jsx_ext_required = 0

set dictionary+=./.dictionary

"onmi func
augroup omnifuncs
	autocmd!
	autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
	autocmd FileType html setlocal omnifunc=htmlcomplete#CompleteTags
"	autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
	autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
	autocmd Filetype java setlocal omnifunc=javacomplete#Complete
	autocmd Filetype java setlocal completefunc=javacomplete#CompleteParamsInfo
augroup end

"ternjs
let g:tern_map_keys=1
let g:tern_show_argument_hints='on_hold'
let g:tern_show_signature_in_pum = 1
autocmd FileType javascript setlocal omnifunc=tern#Complete

highlight Pmenu ctermbg=238 gui=bold
let g:SuperTabDefaultCompletionType = "<C-X><C-O>"
let g:SuperTabContextDefaultCompletionType = "context"

runtime macros/matchit.vim
let delimitMate_expand_cr = 1

" vertical line indentation
let g:indentLine_color_term = 239
let g:indentLine_color_gui = '#09AA08'
let g:indentLine_char = 'Â¦'

" for .hql files
au BufNewFile,BufRead *.hql set filetype=hive expandtab
"
" " for .q files
au BufNewFile,BufRead *.q set filetype=hive expandtab
no <Up> <NOP> 
no <Down> <NOP> 
no <Left> <NOP>
no <Right> <NOP>

ino <Up> <NOP>
ino <Down> <NOP>
ino <Left> <NOP>
ino <Right> <NOP>

vno <Up> <NOP>
vno <Down> <NOP>
vno <Left> <NOP>
vno <Right> <NOP>

execute "set <M-j>=\ej"
execute "set <M-k>=\ek"
nnoremap <M-j> :m .+1<CR>==
nnoremap <M-k> :m .-2<CR>==
"inoremap <M-j> <Esc>:m .+1<CR>==gi
"inoremap <M-k> <Esc>:m .-2<CR>==gi
"vnoremap <M-j> :m '>+1<CR>gv=gv
"vnoremap <M-k> :m '<-2<CR>gv=gv
